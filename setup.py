#!/usr/bin/env python
# Licensed under a 3-clause BSD style license - see LICENSE.rst

import os
import sys

from glob import glob
from setuptools import setup
from setuptools import Extension
from setuptools import find_packages
from distutils.command.build_ext import build_ext
from distutils.command.build_py import build_py
from setuptools.command.develop import develop

try:
    import numpy
except ImportError:
    print('Missing requirement: numpy. Cannot continue.', file=sys.stderr)
    exit(1)

# Get some values from the setup.cfg
try:
    from ConfigParser import ConfigParser
except ImportError:
    from configparser import ConfigParser
conf = ConfigParser()
conf.read(['setup.cfg'])
metadata = dict(conf.items('metadata'))

PACKAGENAME = metadata.get('package_name', 'packagename')
DESCRIPTION = metadata.get('description', 'Astropy affiliated package')
AUTHOR = metadata.get('author', '')
AUTHOR_EMAIL = metadata.get('author_email', '')
LICENSE = metadata.get('license', 'unknown')
URL = metadata.get('url', 'https://github.com/spacetelescope')

# Include all .c files, recursively, including those generated by
# Cython, since we can not do this in MANIFEST.in with a "dynamic"
# directory name.
c_files = []
for root, dirs, files in os.walk(PACKAGENAME):
    for filename in files:
        if filename.endswith('.c'):
            c_files.append(
                os.path.join(
                    os.path.relpath(root, PACKAGENAME), filename))

ext_info = {
    'include_dirs': [numpy.get_include()],
    'library_dirs': [],
    'libraries': ['qd'],
    'define_macros': [],
}

sources = [
    os.path.join('src', 'math_util.c')
]

qd_build_dir = os.path.abspath(os.path.join('build', 'cextern', 'qd'))
os.makedirs(qd_build_dir, exist_ok=True)

qd_library_path = os.path.abspath(os.path.join('cextern', 'qd-library'))
qd_library_c_path = os.path.join(qd_library_path, 'src')
qd_library_include_path = os.path.join(qd_library_path, 'include')
qd_sources = ' '.join(glob(os.path.join(qd_library_c_path, '*.cpp')))

ext_info['library_dirs'] = [qd_build_dir]
ext_info['include_dirs'] += [qd_library_include_path, 'src']

if sys.platform.startswith('win'):
    # no math library on Windows
    ext_info['define_macros'] += [
        ('_CRT_SECURE_NO_WARNINGS', None),
    ]
else:
    ext_info['libraries'] += ['m']


def build_qd():
    import subprocess

    # Did we already generate the library?
    have_lib = bool(glob(os.path.join(qd_build_dir, '*.a')) + glob(os.path.join(qd_build_dir, '*.lib')))
    if have_lib:
        return

    lib_name = 'libqd.a'
    if sys.platform.startswith('win'):
        lib_name = 'qd.lib'

    cwd = os.path.abspath(os.curdir)
    os.chdir(qd_build_dir)

    print("Generating {}".format(lib_name))
    if not sys.platform.startswith('win') and not os.path.exists(os.path.join(qd_library_c_path, lib_name)):
        subprocess.run('g++ -fPIC -O3 -Wall -Wextra -I. -I{} -c {}'.format(qd_library_include_path, qd_sources).split())
        subprocess.run('ar rcs {} {}'.format(lib_name, qd_sources.replace(qd_library_c_path, qd_build_dir).replace('.cpp', '.o')).split())
    elif not os.path.exists(os.path.join(qd_library_c_path, lib_name)):
        subprocess.run('cl /nologo /EHsc /c /MD /TP /Ox /W4 -I{} {}'.format(qd_library_include_path, qd_sources).split())
        subprocess.run('link /LIB /OUT:{} {}'.format(lib_name, qd_sources.replace(qd_library_c_path, qd_build_dir).replace('.cpp', '.obj')).split())
    os.chdir(cwd)


class CustomBuildPy(build_py):
    def run(self):
        build_py.run(self)
        build_qd()


class CustomBuildExt(build_ext):
    def run(self):
        build_ext.run(self)
        if self.inplace:
            build_py = self.get_finalized_command('build_py')
        build_qd()


class CustomDevelop(develop):
    def run(self):
        build_qd()
        develop.run(self)


setup(
    name=PACKAGENAME,
    use_scm_version=True,
    setup_requires=["setuptools_scm"],
    description=DESCRIPTION,
    install_requires=[
        'astropy',
        'numpy',
    ],
    extras_require={
        'test': [
            'pytest',
        ],
        'docs': [
            'sphinx',
            'sphinx-automodapi',
            'numpydoc',
        ],
    },
    author=AUTHOR,
    author_email=AUTHOR_EMAIL,
    license=LICENSE,
    url=URL,
    zip_safe=False,
    packages=find_packages(),
    package_data={
        '': ['README.rst', 'licenses/*'],
        PACKAGENAME: [
            os.path.join(PACKAGENAME, '*'),
        ]
    },
    ext_modules=[
        Extension('spherical_geometry.math_util', sources, **ext_info)
    ],
    cmdclass={
        'build_ext': CustomBuildExt,
        'build_py': CustomBuildPy,
        'develop': CustomDevelop,
    },
)
